openapi: 3.0.1
info:
  title: Pizza ordering
  description: Test assignment for moberries
  version: 1.0.0
servers:
- url: localhost:8000/api/v1/
paths:
  /orders/{orderId}:
    get:
      summary: Retrieve an order by it's identifier
      parameters:
        - name: orderId
          in: path
          required: true
          description: Id of the order
          schema:
            type : integer
            format: int64
            minimum: 1
      responses: 
        '200':
          description: Order info succesfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order with the specified ID was not found.
        '5XX':
          description: Unexpected error.
    put:
      summary: Update details of the order's content
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputOrder'
      responses: 
        '200':
          description: Order succesfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400': 
          description: Bad request. Incomplete order_items.
        '5XX':
          description: Unexpected error.
    patch:
      summary: Update status of the order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                delivery_status:
                  type: string
                  enum: [not_in_delivery, ready_for_delivery, dispatched, on_its_way, delivered]
                  description: Status of the order
      responses: 
        '200':
          description: Delivery status was succesfully patched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400': 
          description: Bad request. Inexistent delivery status
        '5XX':
          description: Unexpected error.
    delete:
      summary: Remove an order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
      responses: 
        '204':
          description: Succesfully deleted
        '5XX':
          description: Unexpected error.
  /orders/:
    get:
      summary: List all orders
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: delivery_status
          schema:
            type: string
          description: filtering by status
        - in: query
          name: customer_email
          schema:
            type: integer
          description: filtering by customer
      responses: 
        '200':
          description: All orders info succesfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 20
                  next:
                    type: string
                    example: "http://localhost:8000/api/v1/orders/?limit=10&offset=20"
                  previous:
                    type: string
                    example: "http://localhost:8000/api/v1/orders/?limit=10&offset=10"
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'

    post:
      summary: Place a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputOrder'
      responses:
        '201':
          description: Order successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request. Incomplete order_items.
        '5XX':
          description: Unexpected error.

components:
  schemas:
    InputOrder:
      required:
      - customer_email
      - order_items
      type: object
      properties:
        customer_email:
          type: string
          format: email
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      example:
        customer_email: "test@example.com"
        order_items:
          - flavour: "salami"
            quantity: 1
            size: "big"
          - flavour: "salami"
            quantity: 3
            size: "small"
          - flavour: "hawaii"
            quantity: 2
            size: "small"
    Order:
      required:
      - id
      - created_at
      - updated_at
      - customer_email
      - delivery_status
      - order_items
      type: object
      properties:
        id:
          type : integer
          format: int64
          minimum: 1
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        customer_email:
          type: string
          format: email
        delivery_status:
          type: string
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      example:
        id: 42
        created_at: "2017-07-21T17:32:28Z"
        updated_at: "2017-07-21T18:32:28Z"
        customer_email: "test@example.com"
        delivery_status: "delivered"
        order_items:
          - flavour: "salami"
            quantity: 1
            size: "big"
          - flavour: "salami"
            quantity: 3
            size: "small"
          - flavour: "hawaii"
            quantity: 2
            size: "small"

    OrderItem:
      required:
      - flavour
      - quantity
      - size
      type: object
      properties:
        flavour:
          type: string
          enum: [margherita, hawaii, fungi, pepperoni, capricciosa]
        amount:
          type: integer
        size:
          type: string
          enum: [big, small]
